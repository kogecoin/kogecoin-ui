{"version":3,"sources":["../src/crypt3.ts"],"names":["createSalt","type","crypto","randomBytes","toString","TypeError","crypt3","key","salt"],"mappings":";;;;;;;;AAQA;;AAEA;;;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,CAAoBC,IAAI,GAAG,OAA3B,EAA4C;AACjD,UAAQA,IAAR;AACE,SAAK,OAAL;AACE;AACA,aAAOC,gBAAOC,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,CAA+B,QAA/B,CAAP;;AAEF,SAAK,KAAL;AACE,aAAO,QAAQF,gBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,QAAhC,CAAf;;AAEF,SAAK,UAAL;AACE,aAAO,SAASF,gBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,QAAhC,CAAhB;;AAEF,SAAK,QAAL;AACE,aAAO,QAAQF,gBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,QAAhC,CAAf;;AAEF,SAAK,QAAL;AACE,aAAO,QAAQF,gBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,QAAhC,CAAf;;AAEF;AACE,YAAM,IAAIC,SAAJ,CAAe,2CAA0CJ,IAAK,EAA9D,CAAN;AAlBJ;AAoBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,SAASK,MAAT,CAAgBC,GAAhB,EAA6BC,IAAY,GAAGR,UAAU,EAAtD,EAAkE;AAC/E,SAAO,4BAAMO,GAAN,EAAWC,IAAX,CAAP;AACD","sourcesContent":["/** Node.js Crypt(3) Library\n  Inspired by (and intended to be compatible with) sendanor/crypt3\n  see https://github.com/sendanor/node-crypt3\n  The key difference is the removal of the dependency on the unix crypt(3) function\n  which is not platform independent, and requires compilation. Instead, a pure\n  javascript version is used.\n*/\n\nimport crypto from 'crypto';\n\nimport crypt from 'unix-crypt-td-js';\n\n/**\n * Create salt\n * @param {string} type The type of salt: md5, blowfish (only some linux\n * distros), sha256 or sha512. Default is sha512.\n * @returns {string} Generated salt string\n */\nexport function createSalt(type = 'crypt'): string {\n  switch (type) {\n    case 'crypt':\n      // Legacy crypt salt with no prefix (only the first 2 bytes will be used).\n      return crypto.randomBytes(2).toString('base64');\n\n    case 'md5':\n      return '$1$' + crypto.randomBytes(10).toString('base64');\n\n    case 'blowfish':\n      return '$2a$' + crypto.randomBytes(10).toString('base64');\n\n    case 'sha256':\n      return '$5$' + crypto.randomBytes(10).toString('base64');\n\n    case 'sha512':\n      return '$6$' + crypto.randomBytes(10).toString('base64');\n\n    default:\n      throw new TypeError(`Unknown salt type at crypt3.createSalt: ${type}`);\n  }\n}\n\n/**\n * Crypt(3) password and data encryption.\n * @param {string} key user's typed password\n * @param {string} salt Optional salt, for example SHA-512 use \"$6$salt$\".\n * @returns {string} A generated hash in format $id$salt$encrypted\n * @see https://en.wikipedia.org/wiki/Crypt_(C)\n */\n\nexport default function crypt3(key: string, salt: string = createSalt()): string {\n  return crypt(key, salt);\n}\n"],"file":"crypt3.js"}