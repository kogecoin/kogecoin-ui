"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _fileLocking = require("@verdaccio/file-locking");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * HTPasswd - Verdaccio auth class
 */
class HTPasswd {
  /**
   *
   * @param {*} config htpasswd file
   * @param {object} stuff config.yaml in object from
   */
  // constructor
  constructor(config, stuff) {
    _defineProperty(this, "users", void 0);

    _defineProperty(this, "stuff", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "verdaccioConfig", void 0);

    _defineProperty(this, "maxUsers", void 0);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "lastTime", void 0);

    this.users = {}; // config for this module

    this.config = config;
    this.stuff = stuff; // verdaccio logger

    this.logger = stuff.logger; // verdaccio main config object

    this.verdaccioConfig = stuff.config; // all this "verdaccio_config" stuff is for b/w compatibility only

    this.maxUsers = config.max_users ? config.max_users : Infinity;
    this.lastTime = null;
    const {
      file
    } = config;

    if (!file) {
      throw new Error('should specify "file" in config');
    }

    this.path = _path.default.resolve(_path.default.dirname(this.verdaccioConfig.self_path), file);
  }
  /**
   * authenticate - Authenticate user.
   * @param {string} user
   * @param {string} password
   * @param {function} cd
   * @returns {function}
   */


  authenticate(user, password, cb) {
    this.reload(err => {
      if (err) {
        return cb(err.code === 'ENOENT' ? null : err);
      }

      if (!this.users[user]) {
        return cb(null, false);
      }

      if (!(0, _utils.verifyPassword)(password, this.users[user])) {
        return cb(null, false);
      } // authentication succeeded!
      // return all usergroups this user has access to;
      // (this particular package has no concept of usergroups, so just return
      // user herself)


      return cb(null, [user]);
    });
  }
  /**
   * Add user
   * 1. lock file for writing (other processes can still read)
   * 2. reload .htpasswd
   * 3. write new data into .htpasswd.tmp
   * 4. move .htpasswd.tmp to .htpasswd
   * 5. reload .htpasswd
   * 6. unlock file
   *
   * @param {string} user
   * @param {string} password
   * @param {function} realCb
   * @returns {function}
   */


  adduser(user, password, realCb) {
    const pathPass = this.path;
    let sanity = (0, _utils.sanityCheck)(user, password, _utils.verifyPassword, this.users, this.maxUsers); // preliminary checks, just to ensure that file won't be reloaded if it's
    // not needed

    if (sanity) {
      return realCb(sanity, false);
    }

    (0, _utils.lockAndRead)(pathPass, (err, res) => {
      let locked = false; // callback that cleans up lock first

      const cb = err => {
        if (locked) {
          (0, _fileLocking.unlockFile)(pathPass, () => {
            // ignore any error from the unlock
            realCb(err, !err);
          });
        } else {
          realCb(err, !err);
        }
      };

      if (!err) {
        locked = true;
      } // ignore ENOENT errors, we'll just create .htpasswd in that case


      if (err && err.code !== 'ENOENT') {
        return cb(err);
      }

      const body = (res || '').toString('utf8');
      this.users = (0, _utils.parseHTPasswd)(body); // real checks, to prevent race conditions
      // parsing users after reading file.

      sanity = (0, _utils.sanityCheck)(user, password, _utils.verifyPassword, this.users, this.maxUsers);

      if (sanity) {
        return cb(sanity);
      }

      try {
        this._writeFile((0, _utils.addUserToHTPasswd)(body, user, password), cb);
      } catch (err) {
        return cb(err);
      }
    });
  }
  /**
   * Reload users
   * @param {function} callback
   */


  reload(callback) {
    _fs.default.stat(this.path, (err, stats) => {
      if (err) {
        return callback(err);
      }

      if (this.lastTime === stats.mtime) {
        return callback();
      }

      this.lastTime = stats.mtime;

      _fs.default.readFile(this.path, 'utf8', (err, buffer) => {
        if (err) {
          return callback(err);
        }

        Object.assign(this.users, (0, _utils.parseHTPasswd)(buffer));
        callback();
      });
    });
  }

  _stringToUt8(authentication) {
    return (authentication || '').toString();
  }

  _writeFile(body, cb) {
    _fs.default.writeFile(this.path, body, err => {
      if (err) {
        cb(err);
      } else {
        this.reload(() => {
          cb(null);
        });
      }
    });
  }
  /**
   * changePassword - change password for existing user.
   * @param {string} user
   * @param {string} password
   * @param {function} cd
   * @returns {function}
   */


  changePassword(user, password, newPassword, realCb) {
    (0, _utils.lockAndRead)(this.path, (err, res) => {
      let locked = false;
      const pathPassFile = this.path; // callback that cleans up lock first

      const cb = err => {
        if (locked) {
          (0, _fileLocking.unlockFile)(pathPassFile, () => {
            // ignore any error from the unlock
            realCb(err, !err);
          });
        } else {
          realCb(err, !err);
        }
      };

      if (!err) {
        locked = true;
      }

      if (err && err.code !== 'ENOENT') {
        return cb(err);
      }

      const body = this._stringToUt8(res);

      this.users = (0, _utils.parseHTPasswd)(body);

      if (!this.users[user]) {
        return cb(new Error('User not found'));
      }

      try {
        this._writeFile((0, _utils.changePasswordToHTPasswd)(body, user, password, newPassword), cb);
      } catch (err) {
        return cb(err);
      }
    });
  }

}

exports.default = HTPasswd;
//# sourceMappingURL=htpasswd.js.map