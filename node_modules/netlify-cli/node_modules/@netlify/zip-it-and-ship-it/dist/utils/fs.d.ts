/// <reference types="node" />
import { promises as fs } from 'fs';
declare type FsCache = Record<string, unknown>;
declare const cachedLstat: (cache: FsCache, path: string, opts?: import("fs").StatOptions | undefined) => Promise<import("fs").Stats | import("fs").BigIntStats>;
declare const cachedReaddir: (cache: FsCache, path: string, options: import("fs").ObjectEncodingOptions & {
    withFileTypes: true;
}) => Promise<import("fs").Dirent[]>;
declare const cachedReadFile: (cache: FsCache, path: string, options?: BufferEncoding | (import("fs").ObjectEncodingOptions & import("events").Abortable & {
    flag?: import("fs").OpenMode | undefined;
}) | null | undefined) => Promise<string | Buffer>;
declare const getPathWithExtension: (path: string, extension: string) => string;
declare const safeUnlink: (path: string) => Promise<void>;
declare const listFunctionsDirectories: (srcFolders: string[]) => Promise<string[]>;
declare const listFunctionsDirectory: (srcFolder: string) => Promise<string[]>;
declare const resolveFunctionsDirectories: (input: string | string[]) => string[];
declare const mkdirAndWriteFile: typeof fs.writeFile;
export { cachedLstat, cachedReaddir, cachedReadFile, getPathWithExtension, listFunctionsDirectories, listFunctionsDirectory, resolveFunctionsDirectories, safeUnlink, mkdirAndWriteFile, };
export type { FsCache };
