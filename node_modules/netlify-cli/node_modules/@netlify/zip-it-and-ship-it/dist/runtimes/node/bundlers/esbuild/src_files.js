"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSrcFiles = void 0;
const included_files_1 = require("../../utils/included_files");
const package_json_1 = require("../../utils/package_json");
const traversal_cache_1 = require("../../utils/traversal_cache");
const traverse_1 = require("../zisi/traverse");
const getSrcFiles = async ({ config, mainFile, pluginsModulesPath, srcDir }) => {
    const { externalNodeModules = [], includedFiles = [], includedFilesBasePath } = config;
    const { exclude: excludedPaths, paths: includedFilePaths } = await (0, included_files_1.getPathsOfIncludedFiles)(includedFiles, includedFilesBasePath);
    const dependencyPaths = await getSrcFilesForDependencies({
        dependencies: externalNodeModules,
        basedir: srcDir,
        pluginsModulesPath,
    });
    const includedPaths = (0, included_files_1.filterExcludedPaths)([...dependencyPaths, ...includedFilePaths], excludedPaths);
    return [...includedPaths, mainFile];
};
exports.getSrcFiles = getSrcFiles;
const getSrcFilesForDependencies = async function ({ dependencies: dependencyNames, basedir, state = (0, traversal_cache_1.getNewCache)(), pluginsModulesPath, }) {
    if (dependencyNames.length === 0) {
        return [];
    }
    const packageJson = await (0, package_json_1.getPackageJson)(basedir);
    const dependencies = await Promise.all(dependencyNames.map((dependencyName) => getSrcFilesForDependency({
        dependency: dependencyName,
        basedir,
        state,
        packageJson,
        pluginsModulesPath,
    })));
    const paths = new Set(dependencies.flat());
    return [...paths];
};
const getSrcFilesForDependency = async function ({ dependency, basedir, state = (0, traversal_cache_1.getNewCache)(), packageJson, pluginsModulesPath, }) {
    try {
        const paths = await (0, traverse_1.getDependencyPathsForDependency)({ dependency, basedir, state, packageJson, pluginsModulesPath });
        return paths;
    }
    catch (error) {
        if (error.code === 'MODULE_NOT_FOUND') {
            return [];
        }
        throw error;
    }
};
//# sourceMappingURL=src_files.js.map