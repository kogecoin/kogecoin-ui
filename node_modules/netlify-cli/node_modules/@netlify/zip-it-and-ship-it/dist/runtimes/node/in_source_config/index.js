"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IN_SOURCE_CONFIG_MODULE = exports.findISCDeclarationsInPath = void 0;
const non_nullable_1 = require("../../../utils/non_nullable");
const parser_1 = require("../parser");
const exports_1 = require("../parser/exports");
const imports_1 = require("../parser/imports");
const schedule_1 = require("./properties/schedule");
const IN_SOURCE_CONFIG_MODULE = '@netlify/functions';
exports.IN_SOURCE_CONFIG_MODULE = IN_SOURCE_CONFIG_MODULE;
// Parses a JS/TS file and looks for in-source config declarations. It returns
// an array of all declarations found, with `property` indicating the name of
// the property and `data` its value.
const findISCDeclarationsInPath = async (sourcePath) => {
    const ast = await (0, parser_1.safelyParseFile)(sourcePath);
    if (ast === null) {
        return {};
    }
    const imports = ast.body.flatMap((node) => (0, imports_1.getImports)(node, IN_SOURCE_CONFIG_MODULE));
    const exports = (0, exports_1.getMainExport)(ast.body);
    const iscExports = exports
        .map(({ args, local: exportName }) => {
        const matchingImport = imports.find(({ local: importName }) => importName === exportName);
        if (matchingImport === undefined) {
            return null;
        }
        switch (matchingImport.imported) {
            case 'schedule':
                return (0, schedule_1.parse)({ args });
            default:
            // no-op
        }
        return null;
    })
        .filter(non_nullable_1.nonNullable);
    const mergedExports = iscExports.reduce((acc, obj) => ({ ...acc, ...obj }), {});
    return mergedExports;
};
exports.findISCDeclarationsInPath = findISCDeclarationsInPath;
//# sourceMappingURL=index.js.map