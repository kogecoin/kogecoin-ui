"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMainExport = void 0;
const helpers_1 = require("./helpers");
// Finds the main handler export in an AST.
const getMainExport = (nodes) => {
    let handlerExport = [];
    nodes.find((node) => {
        const esmExports = getMainExportFromESM(node);
        if (esmExports.length !== 0) {
            handlerExport = esmExports;
            return true;
        }
        const cjsExports = getMainExportFromCJS(node);
        if (cjsExports.length !== 0) {
            handlerExport = cjsExports;
            return true;
        }
        return false;
    });
    return handlerExport;
};
exports.getMainExport = getMainExport;
// Finds the main handler export in a CJS AST.
const getMainExportFromCJS = (node) => {
    const handlerPaths = [
        ['module', 'exports', 'handler'],
        ['exports', 'handler'],
    ];
    return handlerPaths.flatMap((handlerPath) => {
        if (!(0, helpers_1.isModuleExports)(node, handlerPath) || node.expression.right.type !== 'CallExpression') {
            return [];
        }
        return getExportsFromCallExpression(node.expression.right);
    });
};
// Finds the main handler export in an ESM AST.
// eslint-disable-next-line complexity
const getMainExportFromESM = (node) => {
    var _a;
    if (node.type !== 'ExportNamedDeclaration' || node.exportKind !== 'value') {
        return [];
    }
    const { declaration } = node;
    if (!declaration || declaration.type !== 'VariableDeclaration') {
        return [];
    }
    const handlerDeclaration = declaration.declarations.find((childDeclaration) => {
        const { id, type } = childDeclaration;
        return type === 'VariableDeclarator' && id.type === 'Identifier' && id.name === 'handler';
    });
    if (((_a = handlerDeclaration === null || handlerDeclaration === void 0 ? void 0 : handlerDeclaration.init) === null || _a === void 0 ? void 0 : _a.type) !== 'CallExpression') {
        return [];
    }
    const exports = getExportsFromCallExpression(handlerDeclaration.init);
    return exports;
};
const getExportsFromCallExpression = (node) => {
    const { arguments: args, callee } = node;
    if (callee.type !== 'Identifier') {
        return [];
    }
    const exports = [{ local: callee.name, args }];
    return exports;
};
//# sourceMappingURL=exports.js.map