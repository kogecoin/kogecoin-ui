"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("../../utils/fs");
const non_nullable_1 = require("../../utils/non_nullable");
const zip_binary_1 = require("../../zip_binary");
const detect_runtime_1 = require("../detect_runtime");
const builder_1 = require("./builder");
const constants_1 = require("./constants");
const detectRustFunction = async ({ fsCache, path }) => {
    const stat = await (0, fs_1.cachedLstat)(fsCache, path);
    if (!stat.isDirectory()) {
        return;
    }
    // @ts-expect-error TODO: The `makeCachedFunction` abstraction is causing the
    // return value of `readdir` to be incorrectly typed.
    const files = (await (0, fs_1.cachedReaddir)(fsCache, path));
    const hasCargoManifest = files.includes(constants_1.MANIFEST_NAME);
    if (!hasCargoManifest) {
        return;
    }
    const mainFilePath = (0, path_1.join)(path, 'src', 'main.rs');
    try {
        const mainFile = await (0, fs_1.cachedLstat)(fsCache, mainFilePath);
        if (mainFile.isFile()) {
            return mainFilePath;
        }
    }
    catch {
        // no-op
    }
};
const findFunctionsInPaths = async function ({ featureFlags, fsCache, paths, }) {
    const functions = await Promise.all(paths.map((path) => findFunctionInPath({ path, featureFlags, fsCache })));
    return functions.filter(non_nullable_1.nonNullable);
};
const findFunctionInPath = async function ({ path, featureFlags, fsCache }) {
    const runtime = await (0, detect_runtime_1.detectBinaryRuntime)({ fsCache, path });
    if (runtime === 'rs') {
        return processBinary({ fsCache, path });
    }
    if (featureFlags.buildRustSource !== true) {
        return;
    }
    const rustSourceFile = await detectRustFunction({ fsCache, path });
    if (rustSourceFile) {
        return processSource({ fsCache, mainFile: rustSourceFile, path });
    }
};
const processBinary = async ({ fsCache, path }) => {
    const stat = (await (0, fs_1.cachedLstat)(fsCache, path));
    const filename = (0, path_1.basename)(path);
    const extension = (0, path_1.extname)(path);
    const name = (0, path_1.basename)(path, extension);
    return {
        extension,
        filename,
        mainFile: path,
        name,
        srcDir: (0, path_1.dirname)(path),
        srcPath: path,
        stat,
    };
};
const processSource = async ({ fsCache, mainFile, path, }) => {
    // TODO: This `stat` value is not going to be used, but we need it to satisfy
    // the `FunctionSource` interface. We should revisit whether `stat` should be
    // part of that interface in the first place, or whether we could compute it
    // downstream when needed (maybe using the FS cache as an optimisation).
    const stat = (await (0, fs_1.cachedLstat)(fsCache, path));
    const filename = (0, path_1.basename)(path);
    const extension = (0, path_1.extname)(path);
    const name = (0, path_1.basename)(path, extension);
    return {
        extension,
        filename,
        mainFile,
        name,
        srcDir: path,
        srcPath: path,
        stat,
    };
};
// The name of the binary inside the zip file must always be `bootstrap`
// because they include the Lambda runtime, and that's the name that AWS
// expects for those kind of functions.
const zipFunction = async function ({ config, destFolder, filename, mainFile, runtime, srcDir, srcPath, stat, }) {
    const destPath = (0, path_1.join)(destFolder, `${filename}.zip`);
    const isSource = (0, path_1.extname)(mainFile) === '.rs';
    const zipOptions = {
        destPath,
        filename: 'bootstrap',
        runtime,
    };
    // If we're building from source, we first need to build the source and zip
    // the resulting binary. Otherwise, we're dealing with a binary so we zip it
    // directly.
    if (isSource) {
        const { path: binaryPath, stat: binaryStat } = await (0, builder_1.build)({ config, name: filename, srcDir });
        await (0, zip_binary_1.zipBinary)({ ...zipOptions, srcPath: binaryPath, stat: binaryStat });
    }
    else {
        await (0, zip_binary_1.zipBinary)({ ...zipOptions, srcPath, stat });
    }
    return { config, path: destPath };
};
const runtime = { findFunctionsInPaths, findFunctionInPath, name: 'rs', zipFunction };
exports.default = runtime;
//# sourceMappingURL=index.js.map