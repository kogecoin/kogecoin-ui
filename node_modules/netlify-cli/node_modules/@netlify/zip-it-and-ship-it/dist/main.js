"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipFunctions = exports.zipFunction = exports.listFunctionsFiles = exports.listFunction = exports.listFunctions = void 0;
const path_1 = require("path");
const feature_flags_1 = require("./feature_flags");
const runtimes_1 = require("./runtimes");
const in_source_config_1 = require("./runtimes/node/in_source_config");
const fs_1 = require("./utils/fs");
const augmentWithISC = async (func) => {
    // ISC is currently only supported in JavaScript and TypeScript functions.
    if (func.runtime.name !== 'js') {
        return func;
    }
    const inSourceConfig = await (0, in_source_config_1.findISCDeclarationsInPath)(func.mainFile);
    return { ...func, inSourceConfig };
};
// List all Netlify Functions main entry files for a specific directory
const listFunctions = async function (relativeSrcFolders, { featureFlags: inputFeatureFlags, config, parseISC = false, } = {}) {
    const featureFlags = (0, feature_flags_1.getFlags)(inputFeatureFlags);
    const srcFolders = (0, fs_1.resolveFunctionsDirectories)(relativeSrcFolders);
    const paths = await (0, fs_1.listFunctionsDirectories)(srcFolders);
    const functionsMap = await (0, runtimes_1.getFunctionsFromPaths)(paths, { featureFlags, config });
    const functions = [...functionsMap.values()];
    const augmentedFunctions = parseISC ? await Promise.all(functions.map(augmentWithISC)) : functions;
    return augmentedFunctions.map(getListedFunction);
};
exports.listFunctions = listFunctions;
// Finds a function at a specific path.
const listFunction = async function (path, { featureFlags: inputFeatureFlags, config, parseISC = false, } = {}) {
    const featureFlags = (0, feature_flags_1.getFlags)(inputFeatureFlags);
    const func = await (0, runtimes_1.getFunctionFromPath)(path, { featureFlags, config });
    if (!func) {
        return;
    }
    const augmentedFunction = parseISC ? await augmentWithISC(func) : func;
    return getListedFunction(augmentedFunction);
};
exports.listFunction = listFunction;
// List all Netlify Functions files for a specific directory
const listFunctionsFiles = async function (relativeSrcFolders, { basePath, config, featureFlags: inputFeatureFlags, parseISC = false } = {}) {
    const featureFlags = (0, feature_flags_1.getFlags)(inputFeatureFlags);
    const srcFolders = (0, fs_1.resolveFunctionsDirectories)(relativeSrcFolders);
    const paths = await (0, fs_1.listFunctionsDirectories)(srcFolders);
    const functionsMap = await (0, runtimes_1.getFunctionsFromPaths)(paths, { config, featureFlags });
    const functions = [...functionsMap.values()];
    const augmentedFunctions = parseISC ? await Promise.all(functions.map(augmentWithISC)) : functions;
    const listedFunctionsFiles = await Promise.all(augmentedFunctions.map((func) => getListedFunctionFiles(func, { basePath, featureFlags })));
    return listedFunctionsFiles.flat();
};
exports.listFunctionsFiles = listFunctionsFiles;
const getListedFunction = function ({ runtime, name, mainFile, extension, config, inSourceConfig, }) {
    var _a;
    return { name, mainFile, runtime: runtime.name, extension, schedule: (_a = inSourceConfig === null || inSourceConfig === void 0 ? void 0 : inSourceConfig.schedule) !== null && _a !== void 0 ? _a : config.schedule };
};
const getListedFunctionFiles = async function (func, options) {
    const srcFiles = await getSrcFiles({ ...func, ...options });
    return srcFiles.map((srcFile) => ({ ...getListedFunction(func), srcFile, extension: (0, path_1.extname)(srcFile) }));
};
const getSrcFiles = async function ({ extension, runtime, srcPath, ...args }) {
    const { getSrcFiles: getRuntimeSrcFiles } = runtime;
    if (extension === '.zip' || typeof getRuntimeSrcFiles !== 'function') {
        return [srcPath];
    }
    return await getRuntimeSrcFiles({
        extension,
        runtime,
        srcPath,
        ...args,
    });
};
var zip_1 = require("./zip");
Object.defineProperty(exports, "zipFunction", { enumerable: true, get: function () { return zip_1.zipFunction; } });
Object.defineProperty(exports, "zipFunctions", { enumerable: true, get: function () { return zip_1.zipFunctions; } });
//# sourceMappingURL=main.js.map