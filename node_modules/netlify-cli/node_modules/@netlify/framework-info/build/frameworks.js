// This file is autogenerated at build time
export const FRAMEWORKS = [
  {
    "id": "astro",
    "name": "Astro",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "astro"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "astro.config.mjs"
      ]
    },
    "dev": {
      "command": "astro dev",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "astro build",
      "directory": "dist"
    },
    "staticAssetsDirectory": "public",
    "env": {},
    "plugins": []
  },
  {
    "id": "docusaurus",
    "name": "Docusaurus",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "docusaurus"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "siteConfig.js"
      ]
    },
    "dev": {
      "command": "docusaurus-start",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "docusaurus-build",
      "directory": "build/<project-name>"
    },
    "staticAssetsDirectory": "static",
    "env": {
      "BROWSER": "none"
    },
    "plugins": []
  },
  {
    "id": "docusaurus-v2",
    "name": "Docusaurus 2",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "@docusaurus/core"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "docusaurus.config.js"
      ]
    },
    "dev": {
      "command": "docusaurus start",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "docusaurus build",
      "directory": "build"
    },
    "staticAssetsDirectory": "static",
    "env": {
      "BROWSER": "none"
    },
    "plugins": []
  },
  {
    "id": "eleventy",
    "name": "Eleventy",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "@11ty/eleventy"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        ".eleventy.js"
      ]
    },
    "dev": {
      "command": "eleventy --serve",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "eleventy",
      "directory": "_site"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "gatsby",
    "name": "Gatsby",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "gatsby"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "gatsby-config.js"
      ]
    },
    "dev": {
      "command": "gatsby develop",
      "port": 8000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "gatsby build",
      "directory": "public"
    },
    "staticAssetsDirectory": "static",
    "env": {
      "GATSBY_LOGGER": "yurnalist",
      "GATSBY_PRECOMPILE_DEVELOP_FUNCTIONS": "true",
      "AWS_LAMBDA_JS_RUNTIME": "nodejs14.x",
      "NODE_VERSION": "14"
    },
    "plugins": [
      {
        "packageName": "@netlify/plugin-gatsby",
        "condition": {
          "minNodeVersion": "12.13.0"
        }
      }
    ]
  },
  {
    "id": "gridsome",
    "name": "Gridsome",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "gridsome"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "gridsome.config.js"
      ]
    },
    "dev": {
      "command": "gridsome develop",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "gridsome build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "hexo",
    "name": "Hexo",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "hexo"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "_config.yml"
      ]
    },
    "dev": {
      "command": "hexo server",
      "port": 4000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "hexo generate",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "hugo",
    "name": "Hugo",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [],
      "excludedNpmDependencies": [],
      "configFiles": [
        "config.toml",
        "config.yaml"
      ]
    },
    "dev": {
      "command": "hugo server -w",
      "port": 1313,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "hugo",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "jekyll",
    "name": "Jekyll",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [],
      "excludedNpmDependencies": [],
      "configFiles": [
        "_config.yml",
        "_config.yaml",
        "_config.toml"
      ]
    },
    "dev": {
      "command": "bundle exec jekyll serve -w",
      "port": 4000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "bundle exec jekyll build",
      "directory": "_site"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "middleman",
    "name": "Middleman",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [],
      "excludedNpmDependencies": [],
      "configFiles": [
        "config.rb"
      ]
    },
    "dev": {
      "command": "bundle exec middleman server",
      "port": 4567,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "bundle exec middleman build",
      "directory": "build"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "next-nx",
    "name": "Next.js with Nx",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "@nrwl/next"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "nx serve",
      "port": 4200,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "nx build",
      "directory": "dist/apps/<app name>/.next"
    },
    "env": {},
    "plugins": [
      {
        "packageName": "@netlify/plugin-nextjs",
        "condition": {
          "minNodeVersion": "10.13.0"
        }
      }
    ]
  },
  {
    "id": "next",
    "name": "Next.js",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "next"
      ],
      "excludedNpmDependencies": [
        "@nrwl/next"
      ],
      "configFiles": []
    },
    "dev": {
      "command": "next",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        }
      ]
    },
    "build": {
      "command": "next build",
      "directory": ".next"
    },
    "env": {},
    "plugins": [
      {
        "packageName": "@netlify/plugin-nextjs",
        "condition": {
          "minNodeVersion": "10.13.0"
        }
      }
    ]
  },
  {
    "id": "blitz",
    "name": "Blitz.js",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "blitz"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "blitz dev",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        }
      ]
    },
    "build": {
      "command": "blitz build",
      "directory": "out"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "nuxt",
    "name": "Nuxt 2",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "nuxt",
        "nuxt-edge"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "nuxt",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "nuxt generate",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "nuxt3",
    "name": "Nuxt 3",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "nuxt3"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "npm run dev",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "npm run build",
      "directory": "dist"
    },
    "env": {
      "AWS_LAMBDA_JS_RUNTIME": "nodejs14.x",
      "NODE_VERSION": "14"
    },
    "plugins": []
  },
  {
    "id": "phenomic",
    "name": "Phenomic",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "@phenomic/core"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "phenomic start",
      "port": 3333,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "phenomic build",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "react-static",
    "name": "React Static",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "react-static"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "static.config.js"
      ]
    },
    "dev": {
      "command": "react-static start",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "react-static build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "redwoodjs",
    "name": "RedwoodJS",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "@redwoodjs/core"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "redwood.toml"
      ]
    },
    "dev": {
      "command": "yarn rw dev",
      "port": 8910,
      "pollingStrategies": [
        {
          "name": "TCP"
        }
      ]
    },
    "build": {
      "command": "rw deploy netlify",
      "directory": "web/dist"
    },
    "staticAssetsDirectory": "public",
    "env": {},
    "plugins": []
  },
  {
    "id": "remix",
    "name": "Remix",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "remix",
        "@remix-run/netlify"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "remix.config.js"
      ]
    },
    "dev": {
      "command": "remix watch"
    },
    "build": {
      "command": "remix build",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "stencil",
    "name": "Stencil",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "@stencil/core"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "stencil.config.ts"
      ]
    },
    "dev": {
      "command": "stencil build --dev --watch --serve",
      "port": 3333,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "stencil build",
      "directory": "www"
    },
    "env": {
      "BROWSER": "none",
      "PORT": "3000"
    },
    "plugins": []
  },
  {
    "id": "vuepress",
    "name": "VuePress",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "vuepress"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "vuepress dev",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "vuepress build",
      "directory": ".vuepress/dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "assemble",
    "name": "Assemble",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "assemble"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {},
    "build": {
      "command": "grunt build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "docpad",
    "name": "DocPad",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "docpad"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "docpad run",
      "port": 9778,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "docpad generate",
      "directory": "out"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "harp",
    "name": "Harp",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "harp"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "harp server",
      "port": 9000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "harp compile",
      "directory": "www"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "metalsmith",
    "name": "Metalsmith",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "metalsmith"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {},
    "build": {
      "command": "metalsmith",
      "directory": "build"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "roots",
    "name": "Roots",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "roots"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "roots watch",
      "port": 1111,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "roots compile",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "wintersmith",
    "name": "Wintersmith",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [
        "wintersmith"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "config.json"
      ]
    },
    "dev": {
      "command": "wintersmith preview",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "wintersmith build",
      "directory": "build"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "cecil",
    "name": "Cecil",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [],
      "excludedNpmDependencies": [],
      "configFiles": [
        "config.yml"
      ]
    },
    "dev": {
      "command": "cecil serve",
      "port": 8000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "cecil build",
      "directory": "_site"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "zola",
    "name": "Zola",
    "category": "static_site_generator",
    "detect": {
      "npmDependencies": [],
      "excludedNpmDependencies": [],
      "configFiles": [
        "config.toml"
      ]
    },
    "dev": {
      "command": "zola serve",
      "port": 1111,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "zola build",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "angular",
    "name": "Angular",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "@angular/cli"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "angular.json"
      ]
    },
    "dev": {
      "command": "ng serve",
      "port": 4200,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "ng build --prod",
      "directory": "dist/"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "create-react-app",
    "name": "Create React App",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "react-scripts"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "react-scripts start",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "react-scripts build",
      "directory": "build"
    },
    "staticAssetsDirectory": "public",
    "env": {
      "BROWSER": "none",
      "PORT": "3000"
    },
    "plugins": []
  },
  {
    "id": "ember",
    "name": "Ember.js",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "ember-cli"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "ember-cli-build.js"
      ]
    },
    "dev": {
      "command": "ember serve",
      "port": 4200,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "ember build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "expo",
    "name": "Expo",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "expo"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "app.json"
      ]
    },
    "dev": {
      "command": "expo start --web",
      "port": 19006,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "expo build:web",
      "directory": "web-build"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "quasar",
    "name": "Quasar",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "@quasar/app"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "quasar dev -p 8081",
      "port": 8081,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "quasar build",
      "directory": "dist/spa"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "quasar-v0.17",
    "name": "Quasar",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "quasar-cli"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "quasar dev -p 8080",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "quasar build",
      "directory": ".quasar"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "sapper",
    "name": "Sapper",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "sapper"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "sapper dev",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "sapper export",
      "directory": "__sapper__/export"
    },
    "staticAssetsDirectory": "static",
    "env": {},
    "plugins": []
  },
  {
    "id": "svelte",
    "name": "Svelte",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "svelte"
      ],
      "excludedNpmDependencies": [
        "sapper",
        "@sveltejs/kit"
      ],
      "configFiles": []
    },
    "dev": {
      "command": "npm run dev",
      "port": 5000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "npm run build",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "svelte-kit",
    "name": "SvelteKit",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "@sveltejs/kit"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "svelte-kit dev",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "svelte-kit build",
      "directory": "build"
    },
    "staticAssetsDirectory": "static",
    "env": {},
    "plugins": []
  },
  {
    "id": "vue",
    "name": "Vue.js",
    "category": "frontend_framework",
    "detect": {
      "npmDependencies": [
        "@vue/cli-service"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "vue-cli-service serve",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "vue-cli-service build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "brunch",
    "name": "Brunch",
    "category": "build_tool",
    "detect": {
      "npmDependencies": [
        "brunch"
      ],
      "excludedNpmDependencies": [],
      "configFiles": [
        "brunch-config.js"
      ]
    },
    "dev": {
      "command": "brunch watch --server",
      "port": 3333,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "brunch build",
      "directory": "public"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "parcel",
    "name": "Parcel",
    "category": "build_tool",
    "detect": {
      "npmDependencies": [
        "parcel-bundler",
        "parcel"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "parcel",
      "port": 1234,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "parcel build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "grunt",
    "name": "Grunt",
    "category": "build_tool",
    "detect": {
      "npmDependencies": [
        "grunt"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {},
    "build": {
      "command": "grunt build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "gulp",
    "name": "gulp.js",
    "category": "build_tool",
    "detect": {
      "npmDependencies": [
        "gulp"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {},
    "build": {
      "command": "gulp build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "vite",
    "name": "Vite",
    "category": "build_tool",
    "detect": {
      "npmDependencies": [
        "vite"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "vite",
      "port": 3000,
      "pollingStrategies": [
        {
          "name": "TCP"
        }
      ]
    },
    "build": {
      "command": "vite build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  },
  {
    "id": "wmr",
    "name": "WMR",
    "category": "build_tool",
    "detect": {
      "npmDependencies": [
        "wmr"
      ],
      "excludedNpmDependencies": [],
      "configFiles": []
    },
    "dev": {
      "command": "wmr",
      "port": 8080,
      "pollingStrategies": [
        {
          "name": "TCP"
        },
        {
          "name": "HTTP"
        }
      ]
    },
    "build": {
      "command": "wmr build",
      "directory": "dist"
    },
    "env": {},
    "plugins": []
  }
]