"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newerVersion = exports.updateAvailable = exports.fetchVersion = exports.fetchLatest = void 0;
const fs_1 = require("fs");
const download_1 = __importDefault(require("download"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const semver_1 = require("semver");
async function fetchLatest(release, fetchOptions) {
    // eslint-disable-next-line no-param-reassign
    release.version = await resolveRelease(release.repository, fetchOptions);
    const agent = fetchOptions && fetchOptions.agent;
    return fetchVersion(release, { agent });
}
exports.fetchLatest = fetchLatest;
async function fetchVersion(release, { agent } = {}) {
    validateRelease(release);
    await downloadFile(release, { agent });
}
exports.fetchVersion = fetchVersion;
async function updateAvailable(repository, currentVersion, fetchOptions) {
    const latestVersion = await resolveRelease(repository, fetchOptions);
    return newerVersion(latestVersion, currentVersion);
}
exports.updateAvailable = updateAvailable;
async function resolveRelease(repository, fetchOptions) {
    const res = await (0, node_fetch_1.default)(`https://api.github.com/repos/${repository}/releases/latest`, fetchOptions);
    const json = await res.json();
    if (res.status === 403 && typeof json.message === 'string' && json.message.includes('API rate limit exceeded')) {
        throw new Error('API rate limit exceeded, please try again later');
    }
    return json.tag_name;
}
async function downloadFile(release, { agent }) {
    const url = `https://github.com/${release.repository}/releases/download/${release.version}/${release.package}`;
    await fs_1.promises.mkdir(release.destination, { recursive: true });
    await (0, download_1.default)(url, release.destination, {
        extract: release.extract,
        agent: agent,
    });
}
function validateRelease(release) {
    if (!release.repository) {
        throw new Error('Missing release repository');
    }
    if (!release.package) {
        throw new Error('Missing release package name');
    }
    if (!release.destination) {
        throw new Error('Missing release destination');
    }
    if (!release.version) {
        throw new Error('Missing release version');
    }
}
function newerVersion(latestVersion, currentVersion) {
    if (!latestVersion) {
        return false;
    }
    if (!currentVersion) {
        return true;
    }
    const normalizedLatestVersion = latestVersion.replace(/^v/, '');
    const normalizedCurrentVersion = currentVersion.replace(/^v/, '');
    return (0, semver_1.gt)(normalizedLatestVersion, normalizedCurrentVersion);
}
exports.newerVersion = newerVersion;
