{"version":3,"sources":["../src/index.ts"],"names":["ReadTarball","PassThrough","constructor","options","addAbstractMethods","abort","UploadTarball","done","self","name","_called_methods","__defineGetter__","__defineSetter__","fn"],"mappings":";;;;;;;AAAA;;AAWA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAN,SAA0BC,mBAA1B,CAA8D;AAC5D;AACF;AACA;AACA;AACSC,EAAAA,WAAW,CAACC,OAAD,EAA4B;AAC5C,UAAMA,OAAN,EAD4C,CAE5C;;AACAC,IAAAA,kBAAkB,CAAC,IAAD,EAAO,OAAP,CAAlB;AACD;;AAEMC,EAAAA,KAAK,GAAS,CAAE;;AAXqC;AAc9D;AACA;AACA;AACA;AACA;;;;;AACA,MAAMC,aAAN,SAA4BL,mBAA5B,CAAkE;AAChE;AACF;AACA;AACA;AACSC,EAAAA,WAAW,CAACC,OAAD,EAAe;AAC/B,UAAMA,OAAN,EAD+B,CAE/B;;AACAC,IAAAA,kBAAkB,CAAC,IAAD,EAAO,OAAP,CAAlB,CAH+B,CAK/B;;AACAA,IAAAA,kBAAkB,CAAC,IAAD,EAAO,MAAP,CAAlB;AACD;;AAEMC,EAAAA,KAAK,GAAS,CAAE;;AAChBE,EAAAA,IAAI,GAAS,CAAE;;AAf0C;AAkBlE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,SAASH,kBAAT,CAA4BI,IAA5B,EAAuCC,IAAvC,EAAwD;AACtDD,EAAAA,IAAI,CAACE,eAAL,GAAuBF,IAAI,CAACE,eAAL,IAAwB,EAA/C;;AAEAF,EAAAA,IAAI,CAACG,gBAAL,CAAsBF,IAAtB,EAA4B,YAAW;AACrC,WAAO,YAAiB;AACtBD,MAAAA,IAAI,CAACE,eAAL,CAAqBD,IAArB,IAA6B,IAA7B;AACD,KAFD;AAGD,GAJD;;AAMAD,EAAAA,IAAI,CAACI,gBAAL,CAAsBH,IAAtB,EAA4B,UAASI,EAAT,EAAkB;AAC5C,WAAOL,IAAI,CAACC,IAAD,CAAX;AAEAD,IAAAA,IAAI,CAACC,IAAD,CAAJ,GAAaI,EAAb;;AAEA,QAAIL,IAAI,CAACE,eAAL,IAAwBF,IAAI,CAACE,eAAL,CAAqBD,IAArB,CAA5B,EAAwD;AACtD,aAAOD,IAAI,CAACE,eAAL,CAAqBD,IAArB,CAAP;AAEAD,MAAAA,IAAI,CAACC,IAAD,CAAJ;AACD;AACF,GAVD;AAWD","sourcesContent":["import { PassThrough, TransformOptions } from 'stream';\n\nexport interface IReadTarball {\n  abort?: () => void;\n}\n\nexport interface IUploadTarball {\n  done?: () => void;\n  abort?: () => void;\n}\n\n/**\n * This stream is used to read tarballs from repository.\n * @param {*} options\n * @return {Stream}\n */\nclass ReadTarball extends PassThrough implements IReadTarball {\n  /**\n   *\n   * @param {Object} options\n   */\n  public constructor(options: TransformOptions) {\n    super(options);\n    // called when data is not needed anymore\n    addAbstractMethods(this, 'abort');\n  }\n\n  public abort(): void {}\n}\n\n/**\n * This stream is used to upload tarballs to a repository.\n * @param {*} options\n * @return {Stream}\n */\nclass UploadTarball extends PassThrough implements IUploadTarball {\n  /**\n   *\n   * @param {Object} options\n   */\n  public constructor(options: any) {\n    super(options);\n    // called when user closes connection before upload finishes\n    addAbstractMethods(this, 'abort');\n\n    // called when upload finishes successfully\n    addAbstractMethods(this, 'done');\n  }\n\n  public abort(): void {}\n  public done(): void {}\n}\n\n/**\n * This function intercepts abstract calls and replays them allowing.\n * us to attach those functions after we are ready to do so\n * @param {*} self\n * @param {*} name\n */\n// Perhaps someone knows a better way to write this\nfunction addAbstractMethods(self: any, name: any): void {\n  self._called_methods = self._called_methods || {};\n\n  self.__defineGetter__(name, function() {\n    return function(): void {\n      self._called_methods[name] = true;\n    };\n  });\n\n  self.__defineSetter__(name, function(fn: any) {\n    delete self[name];\n\n    self[name] = fn;\n\n    if (self._called_methods && self._called_methods[name]) {\n      delete self._called_methods[name];\n\n      self[name]();\n    }\n  });\n}\n\nexport { ReadTarball, UploadTarball };\n"],"file":"index.js"}