{"version":3,"sources":["../src/utils.ts"],"names":["statDir","name","Promise","resolve","reject","dirPath","path","dirname","fs","stat","err","stats","isDirectory","Error","statfile","isFile","lockfile","lockOpts","wait","pollPeriod","stale","retries","retryWait","lockFileName","locker","lock"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;AAEO,MAAMA,OAAO,GAAIC,IAAD,IAAyC;AAC9D,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAA2B;AAC5C;AACA,UAAMC,OAAO,GAAGC,cAAKC,OAAL,CAAaN,IAAb,CAAhB;;AACAO,gBAAGC,IAAH,CAAQJ,OAAR,EAAiB,UAASK,GAAT,EAAcC,KAAd,EAAqB;AACpC,UAAID,GAAJ,EAAS;AACP,eAAON,MAAM,CAACM,GAAD,CAAb;AACD,OAFD,MAEO,IAAI,CAACC,KAAK,CAACC,WAAN,EAAL,EAA0B;AAC/B,eAAOT,OAAO,CAAC,IAAIU,KAAJ,CAAW,GAAEP,cAAKC,OAAL,CAAaN,IAAb,CAAmB,qBAAhC,CAAD,CAAd;AACD,OAFM,MAEA;AACL,eAAOE,OAAO,CAAC,IAAD,CAAd;AACD;AACF,KARD;AASD,GAZM,CAAP;AAaD,CAdM;;;;AAgBA,MAAMW,QAAQ,GAAIb,IAAD,IAAyC;AAC/D,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAA2B;AAC5C;AACAI,gBAAGC,IAAH,CAAQR,IAAR,EAAc,UAASS,GAAT,EAAcC,KAAd,EAAqB;AACjC,UAAID,GAAJ,EAAS;AACP,eAAON,MAAM,CAACM,GAAD,CAAb;AACD,OAFD,MAEO,IAAI,CAACC,KAAK,CAACI,MAAN,EAAL,EAAqB;AAC1B,eAAOZ,OAAO,CAAC,IAAIU,KAAJ,CAAW,GAAEP,cAAKC,OAAL,CAAaN,IAAb,CAAmB,gBAAhC,CAAD,CAAd;AACD,OAFM,MAEA;AACL,eAAOE,OAAO,CAAC,IAAD,CAAd;AACD;AACF,KARD;AASD,GAXM,CAAP;AAYD,CAbM;;;;AAeA,MAAMa,QAAQ,GAAIf,IAAD,IAAoC;AAC1D,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAmB;AACpC,UAAMc,QAAQ,GAAG;AACf;AACAC,MAAAA,IAAI,EAAE,IAFS;AAGf;AACAC,MAAAA,UAAU,EAAE,GAJG;AAKf;AACAC,MAAAA,KAAK,EAAE,IAAI,EAAJ,GAAS,IAND;AAOf;AACAC,MAAAA,OAAO,EAAE,GARM;AASf;AACAC,MAAAA,SAAS,EAAE;AAVI,KAAjB;AAYA,UAAMC,YAAY,GAAI,GAAEtB,IAAK,OAA7B;;AACAuB,sBAAOC,IAAP,CAAYF,YAAZ,EAA0BN,QAA1B,EAAoC,MAAM;AACxCd,MAAAA,OAAO;AACR,KAFD;AAGD,GAjBM,CAAP;AAkBD,CAnBM","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport locker from 'lockfile';\n\nexport const statDir = (name: string): Promise<Error | null> => {\n  return new Promise((resolve, reject): void => {\n    // test to see if the directory exists\n    const dirPath = path.dirname(name);\n    fs.stat(dirPath, function(err, stats) {\n      if (err) {\n        return reject(err);\n      } else if (!stats.isDirectory()) {\n        return resolve(new Error(`${path.dirname(name)} is not a directory`));\n      } else {\n        return resolve(null);\n      }\n    });\n  });\n};\n\nexport const statfile = (name: string): Promise<Error | null> => {\n  return new Promise((resolve, reject): void => {\n    // test to see if the directory exists\n    fs.stat(name, function(err, stats) {\n      if (err) {\n        return reject(err);\n      } else if (!stats.isFile()) {\n        return resolve(new Error(`${path.dirname(name)} is not a file`));\n      } else {\n        return resolve(null);\n      }\n    });\n  });\n};\n\nexport const lockfile = (name: string): Promise<unknown> => {\n  return new Promise((resolve): void => {\n    const lockOpts = {\n      // time (ms) to wait when checking for stale locks\n      wait: 1000,\n      // how often (ms) to re-check stale locks\n      pollPeriod: 100,\n      // locks are considered stale after 5 minutes\n      stale: 5 * 60 * 1000,\n      // number of times to attempt to create a lock\n      retries: 100,\n      // time (ms) between tries\n      retryWait: 100,\n    };\n    const lockFileName = `${name}.lock`;\n    locker.lock(lockFileName, lockOpts, () => {\n      resolve();\n    });\n  });\n};\n"],"file":"utils.js"}