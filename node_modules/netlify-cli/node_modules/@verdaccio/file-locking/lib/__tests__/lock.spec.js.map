{"version":3,"sources":["../../src/__tests__/lock.spec.ts"],"names":["getFilePath","filename","path","resolve","__dirname","removeTempFile","filepath","fs","unlink","error","describe","test","done","expect","toBeNull","message","toMatch","data","options","parse","errorMessage","process","platform","toEqual","lock"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\n\nimport { lockFile, unlockFile, readFile } from '../index';\n\ninterface Error {\n  message: string;\n}\n\nconst getFilePath = (filename: string): string => {\n  return path.resolve(__dirname, `assets/${filename}`);\n};\n\nconst removeTempFile = (filename: string): void => {\n  const filepath = getFilePath(filename);\n  fs.unlink(filepath, error => {\n    if (error) {\n      throw error;\n    }\n  });\n};\n\ndescribe('testing locking', () => {\n  describe('lockFile', () => {\n    test('file should be found to be locked', done => {\n      lockFile(getFilePath('package.json'), (error: Error) => {\n        expect(error).toBeNull();\n        removeTempFile('package.json.lock');\n        done();\n      });\n    });\n\n    test('file should fail to be found to be locked', done => {\n      lockFile(getFilePath('package.fail.json'), (error: Error) => {\n        expect(error.message).toMatch(/ENOENT: no such file or directory, stat '(.*)package.fail.json'/);\n        done();\n      });\n    });\n  });\n\n  describe('unlockFile', () => {\n    test('file should to be found to be unLock', done => {\n      unlockFile(getFilePath('package.json.lock'), (error: Error) => {\n        expect(error).toBeNull();\n        done();\n      });\n    });\n  });\n\n  describe('readFile', () => {\n    test('read file with no options should to be found to be read it as string', done => {\n      readFile(getFilePath('package.json'), {}, (error: Error, data: string) => {\n        expect(error).toBeNull();\n        done();\n      });\n    });\n\n    test('read file with no options should to be found to be read it as object', done => {\n      const options = {\n        parse: true,\n      };\n      readFile(getFilePath('package.json'), options, (error: Error, data: string) => {\n        expect(error).toBeNull();\n        done();\n      });\n    });\n\n    test('read file with options (parse) should to be not found to be read it', done => {\n      const options = {\n        parse: true,\n      };\n      readFile(getFilePath('package.fail.json'), options, (error: Error) => {\n        expect(error.message).toMatch(/ENOENT: no such file or directory, open '(.*)package.fail.json'/);\n        done();\n      });\n    });\n\n    test('read file with options should to be found to be read it and fails to be parsed', done => {\n      const options = {\n        parse: true,\n      };\n      const errorMessage =\n        process.platform === 'win32'\n          ? 'Unexpected token } in JSON at position 47'\n          : 'Unexpected token } in JSON at position 44';\n      readFile(getFilePath('wrong.package.json'), options, (error: Error) => {\n        expect(error.message).toEqual(errorMessage);\n        done();\n      });\n    });\n\n    test('read file with  options (parse, lock) should to be found to be read it as object', done => {\n      const options = {\n        parse: true,\n        lock: true,\n      };\n      readFile(getFilePath('package2.json'), options, (error: Error, data: string) => {\n        expect(error).toBeNull();\n        removeTempFile('package2.json.lock');\n        done();\n      });\n    });\n\n    test('read file with options (parse, lock) should to be found to be read it and fails to be parsed', done => {\n      const options = {\n        parse: true,\n        lock: true,\n      };\n      const errorMessage =\n        process.platform === 'win32'\n          ? 'Unexpected token } in JSON at position 47'\n          : 'Unexpected token } in JSON at position 44';\n      readFile(getFilePath('wrong.package.json'), options, (error: Error) => {\n        expect(error.message).toEqual(errorMessage);\n        removeTempFile('wrong.package.json.lock');\n        done();\n      });\n    });\n  });\n});\n"],"file":"lock.spec.js"}