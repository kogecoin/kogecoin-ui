"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchEnabledServices = exports.ensureAppForSite = exports.createNewAppSchema = exports.upsertAppForSite = exports.fetchAppSchema = exports.friendlyEventName = exports.createPersistedQuery = exports.ackCLISessionEvents = exports.updateCLISessionMetadata = exports.createCLISession = exports.fetchCliSessionEvents = exports.fetchPersistedQuery = exports.fetchOneGraphSchema = exports.fetchOneGraphSchemaJson = exports.internalOperationsDoc = void 0;
var graphql_1 = require("graphql");
var fetch = require("node-fetch");
var internalConsole_1 = require("./internalConsole");
exports.internalOperationsDoc = "\nmutation CreatePersistedQueryMutation(\n  $nfToken: String!\n  $appId: String!\n  $query: String!\n  $tags: [String!]!\n  $description: String!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createPersistedQuery(\n      input: {\n        query: $query\n        appId: $appId\n        tags: $tags\n        description: $description\n      }\n    ) {\n      persistedQuery {\n        id\n      }\n    }\n  }\n}\n\nquery ListPersistedQueries(\n  $appId: String!\n  $first: Int!\n  $after: String\n  $tags: [String!]!\n) {\n  oneGraph {\n    app(id: $appId) {\n      id\n      persistedQueries(\n        first: $first\n        after: $after\n        tags: $tags\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          query\n          fixedVariables\n          freeVariables\n          allowedOperationNames\n          tags\n          description\n        }\n      }\n    }\n  }\n}\n\nsubscription ListPersistedQueriesSubscription(\n  $appId: String!\n  $first: Int!\n  $after: String\n  $tags: [String!]!\n) {\n  poll(\n    onlyTriggerWhenPayloadChanged: true\n    schedule: { every: { minutes: 1 } }\n  ) {\n    query {\n      oneGraph {\n        app(id: $appId) {\n          id\n          persistedQueries(\n            first: $first\n            after: $after\n            tags: $tags\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              id\n              query\n              fixedVariables\n              freeVariables\n              allowedOperationNames\n              tags\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery PersistedQueriesQuery(\n  $nfToken: String!\n  $appId: String!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    app(id: $appId) {\n      persistedQueries {\n        nodes {\n          id\n          query\n          allowedOperationNames\n          description\n          freeVariables\n          fixedVariables\n          tags\n        }\n      }\n    }\n  }\n}\n\nquery PersistedQueryQuery(\n  $nfToken: String!\n  $appId: String!\n  $id: String!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    persistedQuery(appId: $appId, id: $id) {\n      id\n      query\n      allowedOperationNames\n      description\n      freeVariables\n      fixedVariables\n      tags\n    }\n  }\n}\n\nmutation CreateCLISessionMutation(\n  $nfToken: String!\n  $appId: String!\n  $name: String!\n  $metadata: JSON\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createNetlifyCliSession(\n      input: { appId: $appId, name: $name, metadata: metadata }\n    ) {\n      session {\n        id\n        appId\n        netlifyUserId\n        name\n      }\n    }\n  }\n}\n\nmutation UpdateCLISessionMetadataMutation(\n  $nfToken: String!\n  $sessionId: String!\n  $metadata: JSON!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    updateNetlifyCliSession(\n      input: { id: $sessionId, metadata: $metadata }\n    ) {\n      session {\n        id\n        name\n        metadata\n      }\n    }\n  }\n}\n\nmutation CreateCLISessionEventMutation(\n  $nfToken: String!\n  $sessionId: String!\n  $payload: JSON!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createNetlifyCliTestEvent(\n      input: {\n        data: { payload: $payload }\n        sessionId: $sessionId\n      }\n    ) {\n      event {\n        id\n        createdAt\n        sessionId\n      }\n    }\n  }\n}\n  \nquery CLISessionEventsQuery(\n  $nfToken: String!\n  $sessionId: String!\n  $first: Int!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    netlifyCliEvents(sessionId: $sessionId, first: $first) {\n      __typename\n      createdAt\n      id\n      sessionId\n      ... on OneGraphNetlifyCliSessionLogEvent {\n        id\n        message\n        sessionId\n        createdAt\n      }\n      ... on OneGraphNetlifyCliSessionTestEvent {\n        id\n        createdAt\n        payload\n        sessionId\n      }\n    }\n  }\n}\n  \nmutation AckCLISessionEventMutation(\n  $nfToken: String!\n  $sessionId: String!\n  $eventIds: [String!]!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    ackNetlifyCliEvents(\n      input: { eventIds: $eventIds, sessionId: $sessionId }\n    ) {\n      events {\n        id\n      }\n    }\n  }\n}\n\nquery AppSchemaQuery(\n  $nfToken: String!\n  $appId: String!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    app(id: $appId) {\n      graphQLSchema {\n        appId\n        createdAt\n        id\n        services {\n          friendlyServiceName\n          logoUrl\n          service\n          slug\n          supportsCustomRedirectUri\n          supportsCustomServiceAuth\n          supportsOauthLogin\n        }\n        updatedAt\n      }\n    }\n  }\n}\n\nmutation UpsertAppForSiteMutation(\n  $nfToken: String!\n  $siteId: String!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    upsertAppForNetlifySite(\n      input: { netlifySiteId: $siteId }\n    ) {\n      org {\n        id\n        name\n      }\n      app {\n        id\n        name\n        corsOrigins\n        customCorsOrigins {\n          friendlyServiceName\n          displayName\n          encodedValue\n        }\n      }\n    }\n  }\n}\n\nmutation CreateNewSchemaMutation(\n  $nfToken: String!\n  $input: OneGraphCreateGraphQLSchemaInput!\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createGraphQLSchema(input: $input) {\n      app {\n        graphQLSchema {\n          id\n        }\n      }\n      graphqlSchema {\n        id\n        services {\n          friendlyServiceName\n          logoUrl\n          service\n          slug\n          supportsCustomRedirectUri\n          supportsCustomServiceAuth\n          supportsOauthLogin\n        }\n      }\n    }\n  }\n}";
var ONEDASH_APP_ID = "0b066ba6-ed39-4db8-a497-ba0be34d5b2a";
var httpOkLow = 200;
var httpOkHigh = 299;
var basicPostTimeoutMilliseconds = 30000;
/**
 * The basic http function used to communicate with OneGraph.
 * The least opinionated function that can be used to communicate with OneGraph.
 * @param {string} url
 * @param {object} options
 * @returns {Promise<object>} The response from OneGraph
 */
var basicPost = function (url, options) { return __awaiter(void 0, void 0, void 0, function () {
    var reqBody, userHeaders, headers, resp, respBody;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                reqBody = options.body || "";
                userHeaders = options.headers || {};
                headers = __assign(__assign({}, userHeaders), { "Content-Type": "application/json", "Content-Length": reqBody.length });
                return [4 /*yield*/, fetch(url, {
                        method: "POST",
                        headers: headers,
                        timeout: basicPostTimeoutMilliseconds,
                        compress: true,
                        body: reqBody,
                    })];
            case 1:
                resp = _a.sent();
                return [4 /*yield*/, resp.text()];
            case 2:
                respBody = _a.sent();
                if (resp.status < httpOkLow || resp.status > httpOkHigh) {
                    internalConsole_1.internalConsole.debug("Response:", respBody);
                    internalConsole_1.internalConsole.error("Netlify Graph upstream return invalid HTTP status code: " + resp.status);
                    return [2 /*return*/, respBody];
                }
                return [2 /*return*/, respBody];
        }
    });
}); };
/**
 * Given an appId and desired services, fetch the schema (in json form) for that app
 * @param {string} appId
 * @param {string[]} enabledServices
 * @returns {Promise<object>} The schema for the app
 */
var fetchOneGraphSchemaJson = function (appId, enabledServices) { return __awaiter(void 0, void 0, void 0, function () {
    var url, headers, response, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                url = "https://serve.onegraph.com/schema?app_id=" + appId + "&services=" + enabledServices.join(",");
                headers = {};
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, basicPost(url, {
                        method: "GET",
                        headers: headers,
                        body: null,
                    })];
            case 2:
                response = _a.sent();
                return [2 /*return*/, JSON.parse(response)];
            case 3:
                error_1 = _a.sent();
                internalConsole_1.internalConsole.error("Error fetching schema:", error_1);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.fetchOneGraphSchemaJson = fetchOneGraphSchemaJson;
/**
 * Given an appId and desired services, fetch the schema json for an app and parse it into a GraphQL Schema
 * @param {string} appId
 * @param {string[]} enabledServices
 * @returns {Promise<GraphQLSchema>} The schema for the app
 */
var fetchOneGraphSchema = function (appId, enabledServices) { return __awaiter(void 0, void 0, void 0, function () {
    var result, schema;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.fetchOneGraphSchemaJson)(appId, enabledServices)];
            case 1:
                result = _a.sent();
                schema = (0, graphql_1.buildClientSchema)(result.data);
                return [2 /*return*/, schema];
        }
    });
}); };
exports.fetchOneGraphSchema = fetchOneGraphSchema;
/**
 * Fetch data from OneGraph
 * @param {object} config
 * @param {string|null} config.accessToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} config.appId The app to query against, typically the siteId
 * @param {string} config.query The full GraphQL operation doc
 * @param {string} config.operationName The operation to execute inside of the GraphQL operation doc
 * @param {object} config.variables The variables to pass to the GraphQL operation
 * @returns {Promise<object>} The response from OneGraph
 */
var fetchOneGraph = function (config) { return __awaiter(void 0, void 0, void 0, function () {
    var accessToken, appId, operationName, query, variables, payload, body, result, value, networkError_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                accessToken = config.accessToken, appId = config.appId, operationName = config.operationName, query = config.query, variables = config.variables;
                payload = {
                    query: query,
                    variables: variables,
                    operationName: operationName,
                };
                body = JSON.stringify(payload);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, basicPost("https://serve.onegraph.com/graphql?app_id=" + appId + "&show_metrics=false", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                            Authorization: accessToken ? "Bearer " + accessToken : "",
                        },
                        body: body,
                    })];
            case 2:
                result = _a.sent();
                value = JSON.parse(result);
                if (value.errors) {
                    internalConsole_1.internalConsole.warn("Errors seen fetching Netlify Graph upstream", operationName, JSON.stringify(value, null, 2));
                }
                return [2 /*return*/, value];
            case 3:
                networkError_1 = _a.sent();
                internalConsole_1.internalConsole.warn("Network error fetching Netlify Graph upstream", networkError_1);
                return [2 /*return*/, {}];
            case 4: return [2 /*return*/];
        }
    });
}); };
/**
 * Fetch data from OneGraph using a previously persisted query
 * @param {object} config
 * @param {string|null} config.accessToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} config.appId The app to query against, typically the siteId
 * @param {string} config.docId The id of the previously persisted GraphQL operation doc
 * @param {string} config.operationName The operation to execute inside of the GraphQL operation doc
 * @param {object} config.variables The variables to pass to the GraphQL operation
 * @returns {Promise<object>} The response from OneGraph
 */
var fetchOneGraphPersisted = function (config) { return __awaiter(void 0, void 0, void 0, function () {
    var accessToken, appId, docId, operationName, variables, payload, result, networkError_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                accessToken = config.accessToken, appId = config.appId, docId = config.docId, operationName = config.operationName, variables = config.variables;
                payload = {
                    doc_id: docId,
                    variables: variables,
                    operationName: operationName,
                };
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, basicPost("https://serve.onegraph.com/graphql?app_id=" + appId, {
                        method: "POST",
                        headers: {
                            Authorization: accessToken ? "Bearer " + accessToken : "",
                        },
                        body: JSON.stringify(payload),
                    })];
            case 2:
                result = _a.sent();
                return [2 /*return*/, JSON.parse(result)];
            case 3:
                networkError_2 = _a.sent();
                internalConsole_1.internalConsole.warn("Network error fetching Netlify Graph upstream", networkError_2);
                return [2 /*return*/, {}];
            case 4: return [2 /*return*/];
        }
    });
}); };
/**
 * Fetch a persisted doc belonging to appId by its id
 * @param {string} authToken
 * @param {string} appId
 * @param {string} docId
 * @returns {string|undefined} The persisted operations doc
 */
var fetchPersistedQuery = function (authToken, appId, docId) { return __awaiter(void 0, void 0, void 0, function () {
    var response, persistedQuery;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchOneGraph({
                    accessToken: authToken,
                    appId: ONEDASH_APP_ID,
                    query: exports.internalOperationsDoc,
                    operationName: "PersistedQueryQuery",
                    variables: {
                        nfToken: authToken,
                        appId: appId,
                        id: docId,
                    },
                })];
            case 1:
                response = _a.sent();
                persistedQuery = response.data &&
                    response.data.oneGraph &&
                    response.data.oneGraph.persistedQuery;
                return [2 /*return*/, persistedQuery];
        }
    });
}); };
exports.fetchPersistedQuery = fetchPersistedQuery;
/**
 *
 * @param {object} options
 * @param {string} options.appId The app to query against, typically the siteId
 * @param {string} options.authToken The (typically netlify) access token that is used for authentication
 * @param {string} options.sessionId The session id to fetch CLI events for
 * @returns {Promise<OneGraphCliEvent[]|undefined>} The unhandled events for the cli session to process
 */
var fetchCliSessionEvents = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, authToken, sessionId, desiredEventCount, next, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                appId = options.appId, authToken = options.authToken, sessionId = options.sessionId;
                desiredEventCount = 1000;
                return [4 /*yield*/, fetchOneGraph({
                        accessToken: null,
                        appId: appId,
                        query: exports.internalOperationsDoc,
                        operationName: "CLISessionEventsQuery",
                        variables: {
                            nfToken: authToken,
                            sessionId: sessionId,
                            first: desiredEventCount,
                        },
                    })];
            case 1:
                next = _a.sent();
                if (next.errors) {
                    return [2 /*return*/, next];
                }
                events = (next.data && next.data.oneGraph && next.data.oneGraph.netlifyCliEvents) ||
                    [];
                return [2 /*return*/, { events: events }];
        }
    });
}); };
exports.fetchCliSessionEvents = fetchCliSessionEvents;
/**
 * Register a new CLI session with OneGraph
 * @param {string} netlifyToken The netlify token to use for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} name The name of the CLI session, will be visible in the UI and CLI ouputs
 * @param {object} metadata Any additional metadata to attach to the session
 * @returns {Promise<object|undefined>} The CLI session object
 */
var createCLISession = function (netlifyToken, appId, name, metadata) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, result, session;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = {
                    nfToken: netlifyToken,
                    appId: appId,
                    name: name,
                    metadata: metadata,
                };
                return [4 /*yield*/, fetchOneGraph({
                        accessToken: null,
                        appId: appId,
                        query: exports.internalOperationsDoc,
                        operationName: "CreateCLISessionMutation",
                        variables: payload,
                    })];
            case 1:
                result = _a.sent();
                session = result.data &&
                    result.data.oneGraph &&
                    result.data.oneGraph.createNetlifyCliSession &&
                    result.data.oneGraph.createNetlifyCliSession.session;
                return [2 /*return*/, session];
        }
    });
}); };
exports.createCLISession = createCLISession;
/**
 * Update the CLI session with new metadata (e.g. the latest docId) by its id
 * @param {string} netlifyToken The netlify token to use for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to update
 * @param {object} metadata The new metadata to set on the session
 * @returns {Promise<object|undefined>} The updated session object
 */
var updateCLISessionMetadata = function (netlifyToken, appId, sessionId, metadata) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchOneGraph({
                    accessToken: null,
                    appId: appId,
                    query: exports.internalOperationsDoc,
                    operationName: "UpdateCLISessionMetadataMutation",
                    variables: {
                        nfToken: netlifyToken,
                        sessionId: sessionId,
                        metadata: metadata,
                    },
                })];
            case 1:
                result = _a.sent();
                session = result.data &&
                    result.data.oneGraph &&
                    result.data.oneGraph.updateNetlifyCliSession &&
                    result.data.oneGraph.updateNetlifyCliSession.session;
                return [2 /*return*/, session];
        }
    });
}); };
exports.updateCLISessionMetadata = updateCLISessionMetadata;
/**
 * Acknoledge CLI events that have been processed and delete them from the upstream queue
 * @param {object} input
 * @param {string} input.appId The app to query against, typically the siteId
 * @param {string} input.authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} input.sessionId The session id the events belong to
 * @param {string[]} input.eventIds The event ids to ack (and delete) from the session queue, having been processed
 * @returns
 */
var ackCLISessionEvents = function (input) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, authToken, eventIds, sessionId, result, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                appId = input.appId, authToken = input.authToken, eventIds = input.eventIds, sessionId = input.sessionId;
                return [4 /*yield*/, fetchOneGraph({
                        accessToken: null,
                        appId: appId,
                        query: exports.internalOperationsDoc,
                        operationName: "AckCLISessionEventMutation",
                        variables: {
                            nfToken: authToken,
                            sessionId: sessionId,
                            eventIds: eventIds,
                        },
                    })];
            case 1:
                result = _a.sent();
                events = result.data &&
                    result.data.oneGraph &&
                    result.data.oneGraph.ackNetlifyCliEvents;
                return [2 /*return*/, events];
        }
    });
}); };
exports.ackCLISessionEvents = ackCLISessionEvents;
/**
 * Create a persisted operations doc to be later retrieved, usually from a GUI
 * @param {string} netlifyToken The netlify token to use for authentication
 * @param {object} input
 * @param {string} input.appId The app to query against, typically the siteId
 * @param {string} input.document The GraphQL operations document to persist
 * @param {string} input.description A description of the operations doc
 * @param {string[]} input.tags A list of tags to attach to the operations doc
 * @returns
 */
var createPersistedQuery = function (netlifyToken, _a) {
    var appId = _a.appId, description = _a.description, document = _a.document, tags = _a.tags;
    return __awaiter(void 0, void 0, void 0, function () {
        var result, persistedQuery;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, fetchOneGraph({
                        accessToken: null,
                        appId: appId,
                        query: exports.internalOperationsDoc,
                        operationName: "CreatePersistedQueryMutation",
                        variables: {
                            nfToken: netlifyToken,
                            appId: appId,
                            query: document,
                            tags: tags,
                            description: description,
                        },
                    })];
                case 1:
                    result = _b.sent();
                    persistedQuery = result.data &&
                        result.data.oneGraph &&
                        result.data.oneGraph.createPersistedQuery &&
                        result.data.oneGraph.createPersistedQuery.persistedQuery;
                    return [2 /*return*/, persistedQuery];
            }
        });
    });
};
exports.createPersistedQuery = createPersistedQuery;
/**
 *
 * @param {OneGraphCliEvent} event
 * @returns {string} a human-friendly description of the event
 */
var friendlyEventName = function (event) {
    var __typename = event.__typename, payload = event.payload;
    switch (__typename) {
        case "OneGraphNetlifyCliSessionTestEvent":
            return (0, exports.friendlyEventName)(payload);
        case "OneGraphNetlifyCliSessionGenerateHandlerEvent":
            return "Generate handler as Netlify function ";
        case "OneGraphNetlifyCliSessionPersistedLibraryUpdatedEvent":
            return "Sync Netlify Graph operations library";
        default: {
            return "Unrecognized event (" + __typename + ")";
        }
    }
};
exports.friendlyEventName = friendlyEventName;
/**
 * Fetch the schema metadata for a site (enabled services, id, etc.)
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} siteId The site id to query against
 * @returns {Promise<object|undefined>} The schema metadata for the site
 */
var fetchAppSchema = function (authToken, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchOneGraph({
                    accessToken: authToken,
                    appId: siteId,
                    query: exports.internalOperationsDoc,
                    operationName: "AppSchemaQuery",
                    variables: {
                        nfToken: authToken,
                        appId: siteId,
                    },
                })];
            case 1:
                result = _a.sent();
                return [2 /*return*/, (result.data &&
                        result.data.oneGraph &&
                        result.data.oneGraph.app &&
                        result.data.oneGraph.app.graphQLSchema)];
        }
    });
}); };
exports.fetchAppSchema = fetchAppSchema;
/**
 * If a site does not exists upstream in OneGraph for the given site, create it
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} siteId The site id to create an app for upstream on OneGraph
 * @returns
 */
var upsertAppForSite = function (authToken, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchOneGraph({
                    accessToken: authToken,
                    appId: ONEDASH_APP_ID,
                    query: exports.internalOperationsDoc,
                    operationName: "UpsertAppForSiteMutation",
                    variables: {
                        nfToken: authToken,
                        siteId: siteId,
                    },
                })];
            case 1:
                result = _a.sent();
                return [2 /*return*/, (result.data &&
                        result.data.oneGraph &&
                        result.data.oneGraph.upsertAppForNetlifySite &&
                        result.data.oneGraph.upsertAppForNetlifySite.app)];
        }
    });
}); };
exports.upsertAppForSite = upsertAppForSite;
/**
 * Create a new schema in OneGraph for the given site with the specified metadata (enabled services, etc.)
 * @param {string} input.netlifyToken The (typically netlify) access token that is used for authentication, if any
 * @param {object} input The details of the schema to create
 * @returns {Promise<object>} The schema metadata for the site
 */
var createNewAppSchema = function (nfToken, input) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchOneGraph({
                    accessToken: null,
                    appId: input.appId,
                    query: exports.internalOperationsDoc,
                    operationName: "CreateNewSchemaMutation",
                    variables: {
                        nfToken: nfToken,
                        input: input,
                    },
                })];
            case 1:
                result = _a.sent();
                return [2 /*return*/, (result.data &&
                        result.data.oneGraph &&
                        result.data.oneGraph.createGraphQLSchema &&
                        result.data.oneGraph.createGraphQLSchema.graphqlSchema)];
        }
    });
}); };
exports.createNewAppSchema = createNewAppSchema;
/**
 * Ensure that an app exists upstream in OneGraph for the given site
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} siteId The site id to create an app for upstream on OneGraph
 * @returns
 */
var ensureAppForSite = function (authToken, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var app, schema;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.upsertAppForSite)(authToken, siteId)];
            case 1:
                app = _a.sent();
                return [4 /*yield*/, (0, exports.fetchAppSchema)(authToken, app.id)];
            case 2:
                schema = _a.sent();
                if (!!schema) return [3 /*break*/, 4];
                internalConsole_1.internalConsole.log("Creating new empty default GraphQL schema for site....");
                return [4 /*yield*/, (0, exports.createNewAppSchema)(authToken, {
                        appId: siteId,
                        enabledServices: ["ONEGRAPH"],
                        setAsDefaultForApp: true,
                    })];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.ensureAppForSite = ensureAppForSite;
/**
 * Fetch a list of what services are enabled for the given site
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} appId The app id to query against
 * @returns
 */
var fetchEnabledServices = function (authToken, appId) { return __awaiter(void 0, void 0, void 0, function () {
    var appSchema;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.fetchAppSchema)(authToken, appId)];
            case 1:
                appSchema = _a.sent();
                return [2 /*return*/, appSchema && appSchema.services];
        }
    });
}); };
exports.fetchEnabledServices = fetchEnabledServices;
//# sourceMappingURL=oneGraphClient.js.map