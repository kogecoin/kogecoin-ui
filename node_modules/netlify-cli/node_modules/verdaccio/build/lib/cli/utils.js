"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MIN_NODE_VERSION = void 0;
exports.getListListenAddresses = getListListenAddresses;
exports.isVersionValid = isVersionValid;
exports.resolveConfigPath = void 0;

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _constants = require("../constants");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = require('../logger');

const resolveConfigPath = function (storageLocation, file) {
  return _path.default.resolve(_path.default.dirname(storageLocation), file);
};

exports.resolveConfigPath = resolveConfigPath;
const MIN_NODE_VERSION = '12';
exports.MIN_NODE_VERSION = MIN_NODE_VERSION;

function isVersionValid(version) {
  return _semver.default.satisfies(version, `>=${MIN_NODE_VERSION}`);
}
/**
 * Retrieve all addresses defined in the config file.
 * Verdaccio is able to listen multiple ports
 * @param {String} argListen
 * @param {String} configListen
 * eg:
 *  listen:
 - localhost:5555
 - localhost:5557
 @return {Array}
 */


function getListListenAddresses(argListen, configListen) {
  // command line || config file || default
  let addresses;

  if (argListen) {
    addresses = [argListen];
  } else if (Array.isArray(configListen)) {
    addresses = configListen;
    process.emitWarning('multiple addresses will be deprecated in the next major, only use one');
  } else if (configListen) {
    addresses = [configListen];
  } else {
    addresses = [_constants.DEFAULT_PORT];
  }

  addresses = addresses.map(function (addr) {
    const parsedAddr = (0, _utils.parseAddress)(addr);

    if (!parsedAddr) {
      logger.logger.warn({
        addr: addr
      }, 'invalid address - @{addr}, we expect a port (e.g. "4873"),' + ' host:port (e.g. "localhost:4873") or full url' + ' (e.g. "http://localhost:4873/")');
    }

    return parsedAddr;
  }).filter(Boolean);
  return addresses;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY2xpL3V0aWxzLnRzIl0sIm5hbWVzIjpbImxvZ2dlciIsInJlcXVpcmUiLCJyZXNvbHZlQ29uZmlnUGF0aCIsInN0b3JhZ2VMb2NhdGlvbiIsImZpbGUiLCJwYXRoIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJNSU5fTk9ERV9WRVJTSU9OIiwiaXNWZXJzaW9uVmFsaWQiLCJ2ZXJzaW9uIiwic2VtdmVyIiwic2F0aXNmaWVzIiwiZ2V0TGlzdExpc3RlbkFkZHJlc3NlcyIsImFyZ0xpc3RlbiIsImNvbmZpZ0xpc3RlbiIsImFkZHJlc3NlcyIsIkFycmF5IiwiaXNBcnJheSIsInByb2Nlc3MiLCJlbWl0V2FybmluZyIsIkRFRkFVTFRfUE9SVCIsIm1hcCIsImFkZHIiLCJwYXJzZWRBZGRyIiwid2FybiIsImZpbHRlciIsIkJvb2xlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBdEI7O0FBRU8sTUFBTUMsaUJBQWlCLEdBQUcsVUFBVUMsZUFBVixFQUFtQ0MsSUFBbkMsRUFBaUQ7QUFDaEYsU0FBT0MsY0FBS0MsT0FBTCxDQUFhRCxjQUFLRSxPQUFMLENBQWFKLGVBQWIsQ0FBYixFQUE0Q0MsSUFBNUMsQ0FBUDtBQUNELENBRk07OztBQUlBLE1BQU1JLGdCQUFnQixHQUFHLElBQXpCOzs7QUFFQSxTQUFTQyxjQUFULENBQXdCQyxPQUF4QixFQUFpQztBQUN0QyxTQUFPQyxnQkFBT0MsU0FBUCxDQUFpQkYsT0FBakIsRUFBMkIsS0FBSUYsZ0JBQWlCLEVBQWhELENBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNLLHNCQUFULENBQWdDQyxTQUFoQyxFQUFtREMsWUFBbkQsRUFBMkU7QUFDaEY7QUFDQSxNQUFJQyxTQUFKOztBQUNBLE1BQUlGLFNBQUosRUFBZTtBQUNiRSxJQUFBQSxTQUFTLEdBQUcsQ0FBQ0YsU0FBRCxDQUFaO0FBQ0QsR0FGRCxNQUVPLElBQUlHLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxZQUFkLENBQUosRUFBaUM7QUFDdENDLElBQUFBLFNBQVMsR0FBR0QsWUFBWjtBQUNBSSxJQUFBQSxPQUFPLENBQUNDLFdBQVIsQ0FBb0IsdUVBQXBCO0FBQ0QsR0FITSxNQUdBLElBQUlMLFlBQUosRUFBa0I7QUFDdkJDLElBQUFBLFNBQVMsR0FBRyxDQUFDRCxZQUFELENBQVo7QUFDRCxHQUZNLE1BRUE7QUFDTEMsSUFBQUEsU0FBUyxHQUFHLENBQUNLLHVCQUFELENBQVo7QUFDRDs7QUFDREwsRUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQ2xCTSxHQURTLENBQ0wsVUFBVUMsSUFBVixFQUF3QjtBQUMzQixVQUFNQyxVQUFVLEdBQUcseUJBQWFELElBQWIsQ0FBbkI7O0FBRUEsUUFBSSxDQUFDQyxVQUFMLEVBQWlCO0FBQ2Z4QixNQUFBQSxNQUFNLENBQUNBLE1BQVAsQ0FBY3lCLElBQWQsQ0FDRTtBQUFFRixRQUFBQSxJQUFJLEVBQUVBO0FBQVIsT0FERixFQUVFLCtEQUErRCxnREFBL0QsR0FBa0gsa0NBRnBIO0FBSUQ7O0FBRUQsV0FBT0MsVUFBUDtBQUNELEdBWlMsRUFhVEUsTUFiUyxDQWFGQyxPQWJFLENBQVo7QUFlQSxTQUFPWCxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuaW1wb3J0IHsgREVGQVVMVF9QT1JUIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHBhcnNlQWRkcmVzcyB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XG5cbmV4cG9ydCBjb25zdCByZXNvbHZlQ29uZmlnUGF0aCA9IGZ1bmN0aW9uIChzdG9yYWdlTG9jYXRpb246IHN0cmluZywgZmlsZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKHN0b3JhZ2VMb2NhdGlvbiksIGZpbGUpO1xufTtcblxuZXhwb3J0IGNvbnN0IE1JTl9OT0RFX1ZFUlNJT04gPSAnMTInO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWZXJzaW9uVmFsaWQodmVyc2lvbikge1xuICByZXR1cm4gc2VtdmVyLnNhdGlzZmllcyh2ZXJzaW9uLCBgPj0ke01JTl9OT0RFX1ZFUlNJT059YCk7XG59XG5cbi8qKlxuICogUmV0cmlldmUgYWxsIGFkZHJlc3NlcyBkZWZpbmVkIGluIHRoZSBjb25maWcgZmlsZS5cbiAqIFZlcmRhY2NpbyBpcyBhYmxlIHRvIGxpc3RlbiBtdWx0aXBsZSBwb3J0c1xuICogQHBhcmFtIHtTdHJpbmd9IGFyZ0xpc3RlblxuICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZ0xpc3RlblxuICogZWc6XG4gKiAgbGlzdGVuOlxuIC0gbG9jYWxob3N0OjU1NTVcbiAtIGxvY2FsaG9zdDo1NTU3XG4gQHJldHVybiB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0TGlzdGVuQWRkcmVzc2VzKGFyZ0xpc3Rlbjogc3RyaW5nLCBjb25maWdMaXN0ZW46IGFueSk6IGFueSB7XG4gIC8vIGNvbW1hbmQgbGluZSB8fCBjb25maWcgZmlsZSB8fCBkZWZhdWx0XG4gIGxldCBhZGRyZXNzZXM7XG4gIGlmIChhcmdMaXN0ZW4pIHtcbiAgICBhZGRyZXNzZXMgPSBbYXJnTGlzdGVuXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZ0xpc3RlbikpIHtcbiAgICBhZGRyZXNzZXMgPSBjb25maWdMaXN0ZW47XG4gICAgcHJvY2Vzcy5lbWl0V2FybmluZygnbXVsdGlwbGUgYWRkcmVzc2VzIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgbmV4dCBtYWpvciwgb25seSB1c2Ugb25lJyk7XG4gIH0gZWxzZSBpZiAoY29uZmlnTGlzdGVuKSB7XG4gICAgYWRkcmVzc2VzID0gW2NvbmZpZ0xpc3Rlbl07XG4gIH0gZWxzZSB7XG4gICAgYWRkcmVzc2VzID0gW0RFRkFVTFRfUE9SVF07XG4gIH1cbiAgYWRkcmVzc2VzID0gYWRkcmVzc2VzXG4gICAgLm1hcChmdW5jdGlvbiAoYWRkcik6IHN0cmluZyB7XG4gICAgICBjb25zdCBwYXJzZWRBZGRyID0gcGFyc2VBZGRyZXNzKGFkZHIpO1xuXG4gICAgICBpZiAoIXBhcnNlZEFkZHIpIHtcbiAgICAgICAgbG9nZ2VyLmxvZ2dlci53YXJuKFxuICAgICAgICAgIHsgYWRkcjogYWRkciB9LFxuICAgICAgICAgICdpbnZhbGlkIGFkZHJlc3MgLSBAe2FkZHJ9LCB3ZSBleHBlY3QgYSBwb3J0IChlLmcuIFwiNDg3M1wiKSwnICsgJyBob3N0OnBvcnQgKGUuZy4gXCJsb2NhbGhvc3Q6NDg3M1wiKSBvciBmdWxsIHVybCcgKyAnIChlLmcuIFwiaHR0cDovL2xvY2FsaG9zdDo0ODczL1wiKSdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlZEFkZHI7XG4gICAgfSlcbiAgICAuZmlsdGVyKEJvb2xlYW4pO1xuXG4gIHJldHVybiBhZGRyZXNzZXM7XG59XG4iXX0=