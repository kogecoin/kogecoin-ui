"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleNotify = handleNotify;
exports.notify = notify;
exports.sendNotification = sendNotification;

var _handlebars = _interopRequireDefault(require("handlebars"));

var _lodash = _interopRequireDefault(require("lodash"));

var _notifyRequest = require("./notify-request");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function handleNotify(metadata, notifyEntry, remoteUser, publishedPackage) {
  let regex;

  if (metadata.name && notifyEntry.packagePattern) {
    regex = new RegExp(notifyEntry.packagePattern, notifyEntry.packagePatternFlags || '');

    if (!regex.test(metadata.name)) {
      return;
    }
  }

  const template = _handlebars.default.compile(notifyEntry.content); // don't override 'publisher' if package.json already has that

  /* eslint no-unused-vars: 0 */

  /* eslint @typescript-eslint/no-unused-vars: 0 */
  // @ts-ignore


  if (_lodash.default.isNil(metadata.publisher)) {
    // @ts-ignore
    metadata = _objectSpread(_objectSpread({}, metadata), {}, {
      publishedPackage,
      publisher: {
        name: remoteUser.name
      }
    });
  }

  const content = template(metadata);
  const options = {
    body: content,
    url: ''
  }; // provides fallback support, it's accept an Object {} and Array of {}

  if (notifyEntry.headers && _lodash.default.isArray(notifyEntry.headers)) {
    const header = {};
    notifyEntry.headers.map(function (item) {
      if (Object.is(item, item)) {
        for (const key in item) {
          /* eslint no-prototype-builtins: 0 */
          if (item.hasOwnProperty(key)) {
            header[key] = item[key];
          }
        }
      }
    });
    options.headers = header;
  } else if (Object.is(notifyEntry.headers, notifyEntry.headers)) {
    options.headers = notifyEntry.headers;
  }

  options.method = notifyEntry.method;

  if (notifyEntry.endpoint) {
    options.url = notifyEntry.endpoint;
  }

  return (0, _notifyRequest.notifyRequest)(options, content);
}

function sendNotification(metadata, notify, remoteUser, publishedPackage) {
  return handleNotify(metadata, notify, remoteUser, publishedPackage);
}

function notify(metadata, config, remoteUser, publishedPackage) {
  if (config.notify) {
    if (config.notify.content) {
      return sendNotification(metadata, config.notify, remoteUser, publishedPackage);
    } // multiple notifications endpoints PR #108


    return Promise.all(_lodash.default.map(config.notify, key => sendNotification(metadata, key, remoteUser, publishedPackage)));
  }

  return Promise.resolve();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbm90aWZ5L2luZGV4LnRzIl0sIm5hbWVzIjpbImhhbmRsZU5vdGlmeSIsIm1ldGFkYXRhIiwibm90aWZ5RW50cnkiLCJyZW1vdGVVc2VyIiwicHVibGlzaGVkUGFja2FnZSIsInJlZ2V4IiwibmFtZSIsInBhY2thZ2VQYXR0ZXJuIiwiUmVnRXhwIiwicGFja2FnZVBhdHRlcm5GbGFncyIsInRlc3QiLCJ0ZW1wbGF0ZSIsIkhhbmRsZWJhcnMiLCJjb21waWxlIiwiY29udGVudCIsIl8iLCJpc05pbCIsInB1Ymxpc2hlciIsIm9wdGlvbnMiLCJib2R5IiwidXJsIiwiaGVhZGVycyIsImlzQXJyYXkiLCJoZWFkZXIiLCJtYXAiLCJpdGVtIiwiT2JqZWN0IiwiaXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm1ldGhvZCIsImVuZHBvaW50Iiwic2VuZE5vdGlmaWNhdGlvbiIsIm5vdGlmeSIsImNvbmZpZyIsIlByb21pc2UiLCJhbGwiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFLQTs7Ozs7Ozs7OztBQUlPLFNBQVNBLFlBQVQsQ0FBc0JDLFFBQXRCLEVBQXlDQyxXQUF6QyxFQUFzREMsVUFBdEQsRUFBOEVDLGdCQUE5RSxFQUE2SDtBQUNsSSxNQUFJQyxLQUFKOztBQUNBLE1BQUlKLFFBQVEsQ0FBQ0ssSUFBVCxJQUFpQkosV0FBVyxDQUFDSyxjQUFqQyxFQUFpRDtBQUMvQ0YsSUFBQUEsS0FBSyxHQUFHLElBQUlHLE1BQUosQ0FBV04sV0FBVyxDQUFDSyxjQUF2QixFQUF1Q0wsV0FBVyxDQUFDTyxtQkFBWixJQUFtQyxFQUExRSxDQUFSOztBQUNBLFFBQUksQ0FBQ0osS0FBSyxDQUFDSyxJQUFOLENBQVdULFFBQVEsQ0FBQ0ssSUFBcEIsQ0FBTCxFQUFnQztBQUM5QjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTUssUUFBUSxHQUFHQyxvQkFBV0MsT0FBWCxDQUFtQlgsV0FBVyxDQUFDWSxPQUEv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OztBQUVELFNBQU8rQixPQUFPLENBQUNFLE9BQVIsRUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnaGFuZGxlYmFycyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgT3B0aW9uc1dpdGhVcmwgfSBmcm9tICdyZXF1ZXN0JztcblxuaW1wb3J0IHsgQ29uZmlnLCBQYWNrYWdlLCBSZW1vdGVVc2VyIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCB7IG5vdGlmeVJlcXVlc3QgfSBmcm9tICcuL25vdGlmeS1yZXF1ZXN0JztcblxudHlwZSBUZW1wbGF0ZU1ldGFkYXRhID0gUGFja2FnZSAmIHsgcHVibGlzaGVkUGFja2FnZTogc3RyaW5nIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVOb3RpZnkobWV0YWRhdGE6IFBhY2thZ2UsIG5vdGlmeUVudHJ5LCByZW1vdGVVc2VyOiBSZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4gfCB2b2lkIHtcbiAgbGV0IHJlZ2V4O1xuICBpZiAobWV0YWRhdGEubmFtZSAmJiBub3RpZnlFbnRyeS5wYWNrYWdlUGF0dGVybikge1xuICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChub3RpZnlFbnRyeS5wYWNrYWdlUGF0dGVybiwgbm90aWZ5RW50cnkucGFja2FnZVBhdHRlcm5GbGFncyB8fCAnJyk7XG4gICAgaWYgKCFyZWdleC50ZXN0KG1ldGFkYXRhLm5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUobm90aWZ5RW50cnkuY29udGVudCk7XG4gIC8vIGRvbid0IG92ZXJyaWRlICdwdWJsaXNoZXInIGlmIHBhY2thZ2UuanNvbiBhbHJlYWR5IGhhcyB0aGF0XG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogMCAqL1xuICAvKiBlc2xpbnQgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzOiAwICovXG4gIC8vIEB0cy1pZ25vcmVcbiAgaWYgKF8uaXNOaWwobWV0YWRhdGEucHVibGlzaGVyKSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBtZXRhZGF0YSA9IHsgLi4ubWV0YWRhdGEsIHB1Ymxpc2hlZFBhY2thZ2UsIHB1Ymxpc2hlcjogeyBuYW1lOiByZW1vdGVVc2VyLm5hbWUgYXMgc3RyaW5nIH0gfTtcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnQ6IHN0cmluZyA9IHRlbXBsYXRlKG1ldGFkYXRhKTtcblxuICBjb25zdCBvcHRpb25zOiBPcHRpb25zV2l0aFVybCA9IHtcbiAgICBib2R5OiBjb250ZW50LFxuICAgIHVybDogJycsXG4gIH07XG5cbiAgLy8gcHJvdmlkZXMgZmFsbGJhY2sgc3VwcG9ydCwgaXQncyBhY2NlcHQgYW4gT2JqZWN0IHt9IGFuZCBBcnJheSBvZiB7fVxuICBpZiAobm90aWZ5RW50cnkuaGVhZGVycyAmJiBfLmlzQXJyYXkobm90aWZ5RW50cnkuaGVhZGVycykpIHtcbiAgICBjb25zdCBoZWFkZXIgPSB7fTtcbiAgICBub3RpZnlFbnRyeS5oZWFkZXJzLm1hcChmdW5jdGlvbiAoaXRlbSk6IHZvaWQge1xuICAgICAgaWYgKE9iamVjdC5pcyhpdGVtLCBpdGVtKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpdGVtKSB7XG4gICAgICAgICAgLyogZXNsaW50IG5vLXByb3RvdHlwZS1idWlsdGluczogMCAqL1xuICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGhlYWRlcltrZXldID0gaXRlbVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IGhlYWRlcjtcbiAgfSBlbHNlIGlmIChPYmplY3QuaXMobm90aWZ5RW50cnkuaGVhZGVycywgbm90aWZ5RW50cnkuaGVhZGVycykpIHtcbiAgICBvcHRpb25zLmhlYWRlcnMgPSBub3RpZnlFbnRyeS5oZWFkZXJzO1xuICB9XG5cbiAgb3B0aW9ucy5tZXRob2QgPSBub3RpZnlFbnRyeS5tZXRob2Q7XG5cbiAgaWYgKG5vdGlmeUVudHJ5LmVuZHBvaW50KSB7XG4gICAgb3B0aW9ucy51cmwgPSBub3RpZnlFbnRyeS5lbmRwb2ludDtcbiAgfVxuXG4gIHJldHVybiBub3RpZnlSZXF1ZXN0KG9wdGlvbnMsIGNvbnRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VuZE5vdGlmaWNhdGlvbihtZXRhZGF0YTogUGFja2FnZSwgbm90aWZ5OiBhbnksIHJlbW90ZVVzZXI6IFJlbW90ZVVzZXIsIHB1Ymxpc2hlZFBhY2thZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gIHJldHVybiBoYW5kbGVOb3RpZnkobWV0YWRhdGEsIG5vdGlmeSwgcmVtb3RlVXNlciwgcHVibGlzaGVkUGFja2FnZSkgYXMgUHJvbWlzZTxhbnk+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm90aWZ5KG1ldGFkYXRhOiBQYWNrYWdlLCBjb25maWc6IENvbmZpZywgcmVtb3RlVXNlcjogUmVtb3RlVXNlciwgcHVibGlzaGVkUGFja2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHwgdm9pZCB7XG4gIGlmIChjb25maWcubm90aWZ5KSB7XG4gICAgaWYgKGNvbmZpZy5ub3RpZnkuY29udGVudCkge1xuICAgICAgcmV0dXJuIHNlbmROb3RpZmljYXRpb24obWV0YWRhdGEsIGNvbmZpZy5ub3RpZnkgYXMgdW5rbm93biBhcyBhbnksIHJlbW90ZVVzZXIsIHB1Ymxpc2hlZFBhY2thZ2UpO1xuICAgIH1cbiAgICAvLyBtdWx0aXBsZSBub3RpZmljYXRpb25zIGVuZHBvaW50cyBQUiAjMTA4XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKF8ubWFwKGNvbmZpZy5ub3RpZnksIChrZXkpID0+IHNlbmROb3RpZmljYXRpb24obWV0YWRhdGEsIGtleSwgcmVtb3RlVXNlciwgcHVibGlzaGVkUGFja2FnZSkpKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbiJdfQ==